--
-- Copyright 2023 Autodesk
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
pyUsd = python.import("pxr.Usd")
pyUsdUtils = python.import("pxr.UsdUtils")

-- Utility to profile max viewport playback performance for a USD animation.
struct fps_profiler
(
    filepath = "",
    initialAnimRange, 
    initialFrameRate,
    stageObject,
    
    FPSArray,
    framestart,
    averageFPS,
    minFPS,
    maxFPS,
    
    function get_fps = 
    (
        -- Stop tracking time for previous frame
        frameEnd = timeStamp()

        if (currentTime != animationRange.start) then
        (
            frameTime = (frameEnd - frameStart) / 1000.0
            fps = 1.0 / frameTime
            append FPSArray fps
        )

        -- Start tracking time for current frame
        frameStart = timeStamp()
    ),

    function measure_animation_fps =
    (
        FPSArray = #()
        framestart = 0
        averageFPS = 0
        minFPS = 3.402823466e+38
        maxFPS = -3.402823466e+38
        
        slidertime = animationrange.end
        
        registerTimeCallback get_fps
        -- Loop through the animation, measuring the fps from the callback
        -- we registered.
        for t in (animationrange.start) to (animationRange.end) do;
        (
            slidertime = t
        )
        unRegisterTimeCallback get_fps
                
        -- Calculate Min,Max, and average fps.
        sum = 0
        for i = 1 to FPSArray.count do
        (
            sum += FPSArray[i]
        )
        averageFPS = sum / (FPSArray.count as float)
        for fps in FPSArray do
        (
            if (fps < minFPS) then (
                minFPS = fps
            )
            if (fps > maxFPS) then (
                maxFPS = fps
            )
        )
    ),
    
    function setup =
    (
        resetMaxFile #noprompt
    
        -- Maximize the Viewport 
        actionMan.executeAction 0 "50026"
        
        -- Create the stage.
        stageObject = UsdStageObject()
        stageObject.SetRootLayer filepath
        stageObject.Name = filepath
    
        -- Zoom to the extents of the stage object.
        select stageObject
        max zoomext sel
        clearSelection()
        
        local stageCache = pyUsdUtils.StageCache.Get()
        local stage = stageCache.Find(pyUsd.StageCache.Id.FromLongInt(stageObject.cacheId))

        -- Setup the timeconfig to match the usd content. Keep track of what was
        -- there initially, to cleanup after ourselves.
        initialAnimRange = animationRange
        initialFrameRate = frameRate
        stage.GetTimeCodesPerSecond()
        frameRate  = stage.GetTimeCodesPerSecond()
        
        -- If no animation range defined, just run 100 frames.
        start = (stage.GetStartTimeCode())
        end = (stage.GetEndTimeCode())            
        if (start == end) do end = start + 100
                    
        animationRange = interval start end
    ),

    function test =
    (
        -- Run the animation multiple times, to profile different things...    
        
        -- We do some bounding box caching on a thread, depending on dataset we may be slower 
        -- on the first run, but not necessarily.
        stageObject.DisplayMode = 2
        measure_animation_fps()
        format "Average FPS for % :\n" (getFileNameFile(filepath))
        format "     UsdPreviewSurface (1st) : % \n" (averageFPS as String)
            
        -- Bounding boxes are guarantied to be cached now.
        stageObject.DisplayMode = 2
        measure_animation_fps()
        format "     UsdPreviewSurface (2nd) : % \n " (averageFPS as String)
              
        -- Using USD Display Colors.
        stageObject.DisplayMode = 1
        measure_animation_fps()
        format "    Display colors           : % \n " (averageFPS as String)    
            
        -- Using the 3dsMax object's wire color.
        stageObject.DisplayMode = 0
        measure_animation_fps()
        format "    Wire color               : % \n " (averageFPS as String)
    
    ),

    function teardown =
    (
        frameRate  = initialFrameRate
        animationRange = initialAnimRange
    ),

    Tests = #(test)
)

function profile_viewport_performance filepath =
(
    fp = fps_profiler filepath:filepath
    fp.setup()
    fp.test()
    fp.teardown()
)