#usda 1.0
(
    startTimeCode = 0
    endTimeCode = 1
    metersPerUnit = 0.0254
    startTimeCode = 0
    timeCodesPerSecond = 30
    upAxis = "Z"
)

def Xform "ProtoRed" () {
    def Cube "cube" () {
        ColorFloat[] primvars:displayColor = [(1,0,0)]
    }
    token visibility = "invisible"
}

def Xform "ProtoGreen" () {
    def Cone "cone" () {
        ColorFloat[] primvars:displayColor = [(0,1,0)]
    }
    token visibility = "invisible"
}

// Normal instancer setup
def PointInstancer "InstancerAllAttrAuth" {
    int[] protoIndices.timeSamples = {
		0:[ 1, 0 ],
		
	}
    rel prototypes = [ <Protos/Proto1>, <Protos/Proto2> ]
    
	point3f[] positions = [(10,0,0), (-10,0,0)]
	quath[] orientations = [(1,0,0,0), (1,0,0,0)]
	point3f[] scales = [(1,1,1), (1,1,1)]
    
	def "Protos" {

        def "Proto1" (
            references = </ProtoRed>
        ) {
            token visibility = "visible"
        }
        def Xform "Proto2" (
            references = </ProtoGreen>
        ) {
            token visibility = "visible"
        }
    }
}

// Instancer with no PRS attributes setup
def PointInstancer "InstancerAttrNotAuth" {
    int[] protoIndices.timeSamples = {
		0:[ 1, 0 ],
		
	}
    rel prototypes = [ <Protos/Proto1>, <Protos/Proto2> ]

	def "Protos" {

        def "Proto1" (
            references = </ProtoRed>
        ) {
            token visibility = "visible"
        }
        def Xform "Proto2" (
            references = </ProtoGreen>
        ) {
            token visibility = "visible"
        }
    }
}

// Instancer with PRS attributes setup empty / malformed data.
def PointInstancer "InstancerAttrAuthEmpty" {
    int[] protoIndices.timeSamples = {
		0:[ 1, 0 ],
		
	}
    rel prototypes = [ <Protos/Proto1>, <Protos/Proto2> ]

	point3f[] positions = []
	quath[] orientations = []
	point3f[] scales = []
    
	def "Protos" {

        def "Proto1" (
            references = </ProtoRed>
        ) {
            token visibility = "visible"
        }
        def Xform "Proto2" (
            references = </ProtoGreen>
        ) {
            token visibility = "visible"
        }
    }
}


// Instancer with PRS attributes setup at a non-default time.
def PointInstancer "InstancerAttrAuthAtTime" {
    int[] protoIndices.timeSamples = {
		0:[ 1, 0 ],
		
	}
    rel prototypes = [ <Protos/Proto1>, <Protos/Proto2> ]

	point3f[] positions.timeSamples = {
		0:[(10,0,0), (-10,0,0)]
	}
	
	quath[] orientations.timeSamples = {
		0:[(1,0,0,0), (1,0,0,0)]
	}
	
	point3f[] scales.timeSamples = {
		0:[(1,1,1), (1,1,1)]
	}
    
	def "Protos" {

        def "Proto1" (
            references = </ProtoRed>
        ) {
            token visibility = "visible"
        }
        def Xform "Proto2" (
            references = </ProtoGreen>
        ) {
            token visibility = "visible"
        }
    }
}

def PointInstancer "SubobjCentersInstances" {
    int[] protoIndices.timeSamples = {
		0:[ 1, 0 ],
		
	}
    rel prototypes = [ <Protos/Proto1>, <Protos/Proto2> ]
    
	point3f[] positions = [(10,10,10), (0,0,0)]
	quath[] orientations = [(1,0,0,0), (1,0,0,0)]
	point3f[] scales = [(1,1,1), (1,1,1)]
    
	def "Protos" {

        def "Proto1" (
            references = </ProtoRed>
        ) {
            token visibility = "visible"
        }
        def Xform "Proto2" (
            references = </ProtoGreen>
        ) {
            token visibility = "visible"
        }
    }
}

def Sphere "SubobjCenterPrim"
{
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (50, 50, 50, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
}