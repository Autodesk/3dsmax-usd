#usda 1.0
(
    customLayerData = {
        string creator = "USD for Autodesk 3ds Max: v0.2.12.0"
    }
    defaultPrim = "consolidation_4_instances"
    metersPerUnit = 0.0254
    upAxis = "Z"
)

def Xform "consolidation_4_instances"
{
    def Xform "Sphere001" (
        prepend inherits = </consolidation_4_instances/_class_Sphere001>
        instanceable = true
    )
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.168677, -0.483523, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    class Class "_class_Sphere001"
    {
        def Mesh "Sphere001" (
            customData = {
                dictionary "3dsmax" = {
                    int matId = 2
                }
            }
        )
        {
            float3[] extent = [(-7.0668163, -7.0668163, -3.0890035e-7), (7.0668163, 7.0668163, 7.0668163)]
            int[] faceVertexCounts = [3, 3, 3, 3]
            int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1]
            point3f[] points = [(0, 0, 7.0668163), (-3.0890035e-7, 7.0668163, -3.0890035e-7), (-7.0668163, -6.178007e-7, -3.0890035e-7), (8.4270944e-8, -7.0668163, -3.0890035e-7), (7.0668163, 0.0000012356014, -3.0890035e-7)]
            color3f[] primvars:displayColor = [(0.34117648, 0.88235295, 0.7764706)]
            texCoord2f[] primvars:map1 = [(0, 1), (0.25, 1), (0.5, 1), (0.75, 1), (0, 0.5), (0.25, 0.5), (0.5, 0.5), (0.75, 0.5), (1, 0.5)] (
                interpolation = "faceVarying"
            )
            rel material:binding = </consolidation_4_instances/Materials/Material__25>
            int[] primvars:map1:indices = [0, 4, 5, 1, 5, 6, 2, 6, 7, 3, 7, 8]
            float3[] primvars:normals = [(4.929265e-8, -2.4646326e-8, 1), (-6.9710325e-8, 0.7071068, 0.70710677), (-0.7071068, -3.4855162e-8, 0.70710677), (6.9710325e-8, -0.7071068, 0.70710677), (0.7071068, 1.0456549e-7, 0.7071068)] (
                interpolation = "vertex"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Sphere002" (
        prepend inherits = </consolidation_4_instances/_class_Sphere001>
        instanceable = true
    )
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-21.0485, -0.483523, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "Sphere003" (
        prepend inherits = </consolidation_4_instances/_class_Sphere001>
        instanceable = true
    )
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (19.7699, -0.483523, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "Sphere004" (
        prepend inherits = </consolidation_4_instances/_class_Sphere001>
        instanceable = true
    )
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.122053, 18.3325, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
    
    def "Materials"
    {
        def Material "Material__25"
        {
            token inputs:frame:map1 = "map1"
            token outputs:surface.connect = </consolidation_4_instances/Materials/Material__25/UsdPreviewSurface.outputs:surface>
  
            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0
                color3f inputs:diffuseColor.connect = </consolidation_4_instances/Materials/Map__1.outputs:rgb>
                float inputs:displacement = 0
                color3f inputs:emissiveColor = (0, 0, 0)
                float inputs:ior = 1.52
                float inputs:metallic = 0
                normal3f inputs:normal = (0, 0, 1)
                float inputs:occlusion = 1
                float inputs:opacity = 1
                float inputs:opacityThreshold = 0
                float inputs:roughness = 0
                color3f inputs:specularColor = (0, 0, 0)
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }
        }
    
        def Shader "Map__1"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @uv_checker.png@
            float2 inputs:st.connect = </consolidation_4_instances/Materials/Map__1/TextureTransform_map1.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
  
            def Shader "PrimvarReader_map1"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname.connect = </consolidation_4_instances/Materials/Material__25.inputs:frame:map1>
                float2 outputs:result
            }
  
            def Shader "TextureTransform_map1"
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </consolidation_4_instances/Materials/Map__1/PrimvarReader_map1.outputs:result>
                float inputs:rotation = 0
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }
        }  
    }
}

