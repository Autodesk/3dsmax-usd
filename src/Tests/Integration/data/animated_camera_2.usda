#usda 1.0
(
    customLayerData = {
        string creator = "USD for Autodesk 3ds Max: v0.7.4.0"
    }
    defaultPrim = "root"
    endTimeCode = 100
    framesPerSecond = 30
    metersPerUnit = 0.0254
    startTimeCode = 0
    timeCodesPerSecond = 30
    upAxis = "Z"
)

def Xform "root"
{
    def Mesh "Box001"
    {
        float3[] extent.timeSamples = {
            0: [(-5, -5, 0), (5, 5, 10)],
        }
        int[] faceVertexCounts.timeSamples = {
            0: [4, 4, 4, 4, 4, 4],
        }
        int[] faceVertexIndices.timeSamples = {
            0: [0, 2, 3, 1, 4, 5, 7, 6, 0, 1, 5, 4, 1, 3, 7, 5, 3, 2, 6, 7, 2, 0, 4, 6],
        }
        point3f[] points.timeSamples = {
            0: [(-5, -5, 0), (5, -5, 0), (-5, 5, 0), (5, 5, 0), (-5, -5, 10), (5, -5, 10), (-5, 5, 10), (5, 5, 10)],
        }
        color3f[] primvars:displayColor = [(0.49411765, 0.3647059, 0.8156863)]
        float3[] primvars:normals (
            interpolation = "faceVarying"
        )
        float3[] primvars:normals.timeSamples = {
            0: [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)],
        }
        int[] primvars:normals:indices.timeSamples = {
            0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],
        }
        texCoord2f[] primvars:st (
            interpolation = "faceVarying"
        )
        texCoord2f[] primvars:st.timeSamples = {
            0: [(1, 0), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 1), (1, 1), (0, 0), (1, 0), (0, 1), (1, 1), (0, 0), (1, 0), (0, 1), (1, 1), (0, 0), (1, 0), (0, 1), (1, 1), (0, 0), (1, 0), (0, 1), (1, 1)],
        }
        int[] primvars:st:indices.timeSamples = {
            0: [0, 2, 3, 1, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 20, 21, 23, 22],
        }
        uniform token subdivisionScheme = "none"
        uniform token subsetFamily:materialBind:familyType = "partition"
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            2: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            3: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            4: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            5: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            6: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            7: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            8: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            9: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            10: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            11: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            12: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            13: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            14: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            15: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            16: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            17: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            18: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            19: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            20: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            21: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            22: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            23: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            24: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            25: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            26: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            27: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            28: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            29: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            30: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            31: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            32: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            33: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            34: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            35: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            36: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            37: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            38: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            39: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            40: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            41: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            42: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            43: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            44: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            45: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            46: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            47: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            48: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            49: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            50: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            51: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            52: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            53: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            54: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            55: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            56: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            57: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            58: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            59: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            60: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            61: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            62: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            63: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            64: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            65: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            66: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            67: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            68: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            69: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            70: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            71: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            72: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            73: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            74: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            75: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            76: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            77: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            78: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            79: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            80: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            81: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            82: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            83: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            84: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            85: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            86: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            87: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            88: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            89: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            90: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            91: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            92: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            93: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            94: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            95: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            96: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            97: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            98: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            99: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            100: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def GeomSubset "_1_" (
            customData = {
                dictionary "3dsmax" = {
                    int matId = 1
                }
            }
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices.timeSamples = {
                0: [1],
            }
        }

        def GeomSubset "_2_" (
            customData = {
                dictionary "3dsmax" = {
                    int matId = 2
                }
            }
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices.timeSamples = {
                0: [0],
            }
        }

        def GeomSubset "_3_" (
            customData = {
                dictionary "3dsmax" = {
                    int matId = 3
                }
            }
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices.timeSamples = {
                0: [5],
            }
        }

        def GeomSubset "_4_" (
            customData = {
                dictionary "3dsmax" = {
                    int matId = 4
                }
            }
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices.timeSamples = {
                0: [3],
            }
        }

        def GeomSubset "_5_" (
            customData = {
                dictionary "3dsmax" = {
                    int matId = 5
                }
            }
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices.timeSamples = {
                0: [2],
            }
        }

        def GeomSubset "_6_" (
            customData = {
                dictionary "3dsmax" = {
                    int matId = 6
                }
            }
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices.timeSamples = {
                0: [4],
            }
        }
    }

    def Camera "Cam1"
    {
        float exposure.timeSamples = {
            0: 6,
            1: 6,
            2: 6,
            3: 6,
            4: 6,
            5: 6,
            6: 6,
            7: 6,
            8: 6,
            9: 6,
            10: 6,
            11: 6,
            12: 6,
            13: 6,
            14: 6,
            15: 6,
            16: 6,
            17: 6,
            18: 6,
            19: 6,
            20: 6,
            21: 6,
            22: 6,
            23: 6,
            24: 6,
            25: 6,
            26: 6,
            27: 6,
            28: 6,
            29: 6,
            30: 6,
            31: 6,
            32: 6,
            33: 6,
            34: 6,
            35: 6,
            36: 6,
            37: 6,
            38: 6,
            39: 6,
            40: 6,
            41: 6,
            42: 6,
            43: 6,
            44: 6,
            45: 6,
            46: 6,
            47: 6,
            48: 6,
            49: 6,
            50: 6,
            51: 6,
            52: 6,
            53: 6,
            54: 6,
            55: 6,
            56: 6,
            57: 6,
            58: 6,
            59: 6,
            60: 6,
            61: 6,
            62: 6,
            63: 6,
            64: 6,
            65: 6,
            66: 6,
            67: 6,
            68: 6,
            69: 6,
            70: 6,
            71: 6,
            72: 6,
            73: 6,
            74: 6,
            75: 6,
            76: 6,
            77: 6,
            78: 6,
            79: 6,
            80: 6,
            81: 6,
            82: 6,
            83: 6,
            84: 6,
            85: 6,
            86: 6,
            87: 6,
            88: 6,
            89: 6,
            90: 6,
            91: 6,
            92: 6,
            93: 6,
            94: 6,
            95: 6,
            96: 6,
            97: 6,
            98: 6,
            99: 6,
            100: 6,
        }
        float focalLength.timeSamples = {
            0: 40.593544,
            1: 40.612038,
            2: 40.667023,
            3: 40.75775,
            4: 40.883507,
            5: 41.043556,
            6: 41.237164,
            7: 41.46361,
            8: 41.722187,
            9: 42.01217,
            10: 42.332844,
            11: 42.68351,
            12: 43.06345,
            13: 43.471962,
            14: 43.90835,
            15: 44.371906,
            16: 44.86193,
            17: 45.377735,
            18: 45.918617,
            19: 46.483887,
            20: 47.072845,
            21: 47.684814,
            22: 48.3191,
            23: 48.975006,
            24: 49.65185,
            25: 50.34894,
            26: 51.06561,
            27: 51.801144,
            28: 52.55488,
            29: 53.32611,
            30: 54.114174,
            31: 54.918377,
            32: 55.738026,
            33: 56.57244,
            34: 57.420944,
            35: 58.282825,
            36: 59.157417,
            37: 60.044025,
            38: 60.941948,
            39: 61.850506,
            40: 62.769,
            41: 63.696724,
            42: 64.63299,
            43: 65.577095,
            44: 66.528336,
            45: 67.48599,
            46: 68.44936,
            47: 69.41773,
            48: 70.39039,
            49: 71.366585,
            50: 72.34562,
            51: 73.326744,
            52: 74.30922,
            53: 75.292305,
            54: 76.27525,
            55: 77.2573,
            56: 78.237686,
            57: 79.21564,
            58: 80.19035,
            59: 81.161095,
            60: 82.127014,
            61: 83.08735,
            62: 84.041275,
            63: 84.98794,
            64: 85.926544,
            65: 86.85623,
            66: 87.77616,
            67: 88.685455,
            68: 89.58325,
            69: 90.468666,
            70: 91.3408,
            71: 92.19876,
            72: 93.0416,
            73: 93.86845,
            74: 94.678314,
            75: 95.470276,
            76: 96.24337,
            77: 96.99665,
            78: 97.729126,
            79: 98.43981,
            80: 99.12774,
            81: 99.79188,
            82: 100.431244,
            83: 101.04483,
            84: 101.63162,
            85: 102.1906,
            86: 102.72075,
            87: 103.22105,
            88: 103.69046,
            89: 104.128006,
            90: 104.532646,
            91: 104.90337,
            92: 105.23918,
            93: 105.53908,
            94: 105.80208,
            95: 106.0272,
            96: 106.21348,
            97: 106.359955,
            98: 106.4657,
            99: 106.52982,
            100: 106.55139,
        }
        float focusDistance.timeSamples = {
            0: 107.70329,
            1: 107.68946,
            2: 107.64834,
            3: 107.58047,
            4: 107.48644,
            5: 107.366806,
            6: 107.222145,
            7: 107.05304,
            8: 106.86003,
            9: 106.64373,
            10: 106.4047,
            11: 106.14354,
            12: 105.8608,
            13: 105.5571,
            14: 105.23301,
            15: 104.889114,
            16: 104.52602,
            17: 104.1443,
            18: 103.744545,
            19: 103.32737,
            20: 102.89335,
            21: 102.44308,
            22: 101.97716,
            23: 101.496185,
            24: 101.000755,
            25: 100.49147,
            26: 99.96892,
            27: 99.433716,
            28: 98.88643,
            29: 98.32768,
            30: 97.75808,
            31: 97.178185,
            32: 96.58863,
            33: 95.99,
            34: 95.3829,
            35: 94.767914,
            36: 94.14565,
            37: 93.516685,
            38: 92.881645,
            39: 92.2411,
            40: 91.595634,
            41: 90.945854,
            42: 90.29235,
            43: 89.6357,
            44: 88.976494,
            45: 88.31532,
            46: 87.65273,
            47: 86.98935,
            48: 86.325714,
            49: 85.66241,
            50: 85,
            51: 84.33906,
            52: 83.68015,
            53: 83.02383,
            54: 82.370636,
            55: 81.72113,
            56: 81.07587,
            57: 80.43538,
            58: 79.80018,
            59: 79.17082,
            60: 78.54782,
            61: 77.93169,
            62: 77.32295,
            63: 76.72211,
            64: 76.12965,
            65: 75.54606,
            66: 74.97185,
            67: 74.40746,
            68: 73.85339,
            69: 73.3101,
            70: 72.77803,
            71: 72.257614,
            72: 71.74932,
            73: 71.25357,
            74: 70.77078,
            75: 70.3014,
            76: 69.84578,
            77: 69.404366,
            78: 68.97755,
            79: 68.56569,
            80: 68.1692,
            81: 67.78845,
            82: 67.42382,
            83: 67.07566,
            84: 66.744354,
            85: 66.43024,
            86: 66.13369,
            87: 65.85507,
            88: 65.594734,
            89: 65.35303,
            90: 65.13034,
            91: 64.926994,
            92: 64.743385,
            93: 64.57988,
            94: 64.43686,
            95: 64.314705,
            96: 64.21381,
            97: 64.134605,
            98: 64.077484,
            99: 64.04288,
            100: 64.03124,
        }
        float fStop.timeSamples = {
            0: 8,
            1: 8,
            2: 8,
            3: 8,
            4: 8,
            5: 8,
            6: 8,
            7: 8,
            8: 8,
            9: 8,
            10: 8,
            11: 8,
            12: 8,
            13: 8,
            14: 8,
            15: 8,
            16: 8,
            17: 8,
            18: 8,
            19: 8,
            20: 8,
            21: 8,
            22: 8,
            23: 8,
            24: 8,
            25: 8,
            26: 8,
            27: 8,
            28: 8,
            29: 8,
            30: 8,
            31: 8,
            32: 8,
            33: 8,
            34: 8,
            35: 8,
            36: 8,
            37: 8,
            38: 8,
            39: 8,
            40: 8,
            41: 8,
            42: 8,
            43: 8,
            44: 8,
            45: 8,
            46: 8,
            47: 8,
            48: 8,
            49: 8,
            50: 8,
            51: 8,
            52: 8,
            53: 8,
            54: 8,
            55: 8,
            56: 8,
            57: 8,
            58: 8,
            59: 8,
            60: 8,
            61: 8,
            62: 8,
            63: 8,
            64: 8,
            65: 8,
            66: 8,
            67: 8,
            68: 8,
            69: 8,
            70: 8,
            71: 8,
            72: 8,
            73: 8,
            74: 8,
            75: 8,
            76: 8,
            77: 8,
            78: 8,
            79: 8,
            80: 8,
            81: 8,
            82: 8,
            83: 8,
            84: 8,
            85: 8,
            86: 8,
            87: 8,
            88: 8,
            89: 8,
            90: 8,
            91: 8,
            92: 8,
            93: 8,
            94: 8,
            95: 8,
            96: 8,
            97: 8,
            98: 8,
            99: 8,
            100: 8,
        }
        float horizontalAperture.timeSamples = {
            0: 36,
            1: 36,
            2: 36,
            3: 36,
            4: 36.000004,
            5: 36.000004,
            6: 36.000004,
            7: 35.999996,
            8: 36,
            9: 36,
            10: 36.000004,
            11: 35.999996,
            12: 35.999996,
            13: 36,
            14: 36,
            15: 36,
            16: 36,
            17: 35.999996,
            18: 36,
            19: 36.000004,
            20: 36,
            21: 36,
            22: 36.000008,
            23: 36.000004,
            24: 36.000004,
            25: 36,
            26: 36.000004,
            27: 36,
            28: 36.000004,
            29: 35.999996,
            30: 36.000004,
            31: 36,
            32: 36,
            33: 35.999996,
            34: 36.000004,
            35: 35.999996,
            36: 36,
            37: 35.999996,
            38: 35.999996,
            39: 36.000004,
            40: 36.000008,
            41: 36,
            42: 36,
            43: 36,
            44: 36.000004,
            45: 36.000004,
            46: 36,
            47: 35.999992,
            48: 36,
            49: 36.000004,
            50: 36,
            51: 36,
            52: 35.999996,
            53: 35.999996,
            54: 36,
            55: 36.000004,
            56: 36,
            57: 36.000004,
            58: 36,
            59: 36,
            60: 36,
            61: 36,
            62: 36.000004,
            63: 36,
            64: 35.999996,
            65: 35.999996,
            66: 36,
            67: 36,
            68: 36,
            69: 36.000004,
            70: 36,
            71: 36,
            72: 36,
            73: 36,
            74: 36,
            75: 35.999996,
            76: 36,
            77: 35.999996,
            78: 36,
            79: 36.000004,
            80: 36,
            81: 36.000004,
            82: 35.999996,
            83: 36,
            84: 36.000004,
            85: 36,
            86: 35.999996,
            87: 35.999996,
            88: 36.000004,
            89: 36,
            90: 36.000004,
            91: 36.000004,
            92: 36.000004,
            93: 36.000004,
            94: 36,
            95: 36,
            96: 36.000004,
            97: 35.999996,
            98: 36,
            99: 36.000004,
            100: 36,
        }
        token projection = "perspective"
        double shutter:close.timeSamples = {
            0: 449.99997653067237,
            1: 449.99997653067237,
            2: 449.99997653067237,
            3: 449.99997653067237,
            4: 449.99997653067237,
            5: 449.99997653067237,
            6: 449.99997653067237,
            7: 449.99997653067237,
            8: 449.99997653067237,
            9: 449.99997653067237,
            10: 449.99997653067237,
            11: 449.99997653067237,
            12: 449.99997653067237,
            13: 449.99997653067237,
            14: 449.99997653067237,
            15: 449.99997653067237,
            16: 449.99997653067237,
            17: 449.99997653067237,
            18: 449.99997653067237,
            19: 449.99997653067237,
            20: 449.99997653067237,
            21: 449.99997653067237,
            22: 449.99997653067237,
            23: 449.99997653067237,
            24: 449.99997653067237,
            25: 449.99997653067237,
            26: 449.99997653067237,
            27: 449.99997653067237,
            28: 449.99997653067237,
            29: 449.99997653067237,
            30: 449.99997653067237,
            31: 449.99997653067237,
            32: 449.99997653067237,
            33: 449.99997653067237,
            34: 449.99997653067237,
            35: 449.99997653067237,
            36: 449.99997653067237,
            37: 449.99997653067237,
            38: 449.99997653067237,
            39: 449.99997653067237,
            40: 449.99997653067237,
            41: 449.99997653067237,
            42: 449.99997653067237,
            43: 449.99997653067237,
            44: 449.99997653067237,
            45: 449.99997653067237,
            46: 449.99997653067237,
            47: 449.99997653067237,
            48: 449.99997653067237,
            49: 449.99997653067237,
            50: 449.99997653067237,
            51: 449.99997653067237,
            52: 449.99997653067237,
            53: 449.99997653067237,
            54: 449.99997653067237,
            55: 449.99997653067237,
            56: 449.99997653067237,
            57: 449.99997653067237,
            58: 449.99997653067237,
            59: 449.99997653067237,
            60: 449.99997653067237,
            61: 449.99997653067237,
            62: 449.99997653067237,
            63: 449.99997653067237,
            64: 449.99997653067237,
            65: 449.99997653067237,
            66: 449.99997653067237,
            67: 449.99997653067237,
            68: 449.99997653067237,
            69: 449.99997653067237,
            70: 449.99997653067237,
            71: 449.99997653067237,
            72: 449.99997653067237,
            73: 449.99997653067237,
            74: 449.99997653067237,
            75: 449.99997653067237,
            76: 449.99997653067237,
            77: 449.99997653067237,
            78: 449.99997653067237,
            79: 449.99997653067237,
            80: 449.99997653067237,
            81: 449.99997653067237,
            82: 449.99997653067237,
            83: 449.99997653067237,
            84: 449.99997653067237,
            85: 449.99997653067237,
            86: 449.99997653067237,
            87: 449.99997653067237,
            88: 449.99997653067237,
            89: 449.99997653067237,
            90: 449.99997653067237,
            91: 449.99997653067237,
            92: 449.99997653067237,
            93: 449.99997653067237,
            94: 449.99997653067237,
            95: 449.99997653067237,
            96: 449.99997653067237,
            97: 449.99997653067237,
            98: 449.99997653067237,
            99: 449.99997653067237,
            100: 449.99997653067237,
        }
        float verticalAperture.timeSamples = {
            0: 20.25,
            1: 20.25,
            2: 20.25,
            3: 20.25,
            4: 20.250002,
            5: 20.250002,
            6: 20.250002,
            7: 20.249998,
            8: 20.25,
            9: 20.25,
            10: 20.250002,
            11: 20.249998,
            12: 20.249998,
            13: 20.25,
            14: 20.25,
            15: 20.25,
            16: 20.25,
            17: 20.249998,
            18: 20.25,
            19: 20.250002,
            20: 20.25,
            21: 20.25,
            22: 20.250004,
            23: 20.250002,
            24: 20.250002,
            25: 20.25,
            26: 20.250002,
            27: 20.25,
            28: 20.250002,
            29: 20.249998,
            30: 20.250002,
            31: 20.25,
            32: 20.25,
            33: 20.249998,
            34: 20.250002,
            35: 20.249998,
            36: 20.25,
            37: 20.249998,
            38: 20.249998,
            39: 20.250002,
            40: 20.250004,
            41: 20.25,
            42: 20.25,
            43: 20.25,
            44: 20.250002,
            45: 20.250002,
            46: 20.25,
            47: 20.249996,
            48: 20.25,
            49: 20.250002,
            50: 20.25,
            51: 20.25,
            52: 20.249998,
            53: 20.249998,
            54: 20.25,
            55: 20.250002,
            56: 20.25,
            57: 20.250002,
            58: 20.25,
            59: 20.25,
            60: 20.25,
            61: 20.25,
            62: 20.250002,
            63: 20.25,
            64: 20.249998,
            65: 20.249998,
            66: 20.25,
            67: 20.25,
            68: 20.25,
            69: 20.250002,
            70: 20.25,
            71: 20.25,
            72: 20.25,
            73: 20.25,
            74: 20.25,
            75: 20.249998,
            76: 20.25,
            77: 20.249998,
            78: 20.25,
            79: 20.250002,
            80: 20.25,
            81: 20.250002,
            82: 20.249998,
            83: 20.25,
            84: 20.250002,
            85: 20.25,
            86: 20.249998,
            87: 20.249998,
            88: 20.250002,
            89: 20.25,
            90: 20.250002,
            91: 20.250002,
            92: 20.250002,
            93: 20.250002,
            94: 20.25,
            95: 20.25,
            96: 20.250002,
            97: 20.249998,
            98: 20.25,
            99: 20.250002,
            100: 20.25,
        }
        matrix4d xformOp:transform.timeSamples = {
            0: ( (-1, 0, 0, 0), (0, -0.371391, 0.928477, 0), (0, 0.928477, 0.371391, 0), (0, 100, 40, 1) ),
            1: ( (-1, 0, 0, 0), (0, -0.371438, 0.928458, 0), (0, 0.928458, 0.371438, 0), (0, 99.9851, 40, 1) ),
            2: ( (-1, 0, 0, 0), (0, -0.37158, 0.928401, 0), (0, 0.928401, 0.37158, 0), (0, 99.9408, 40, 1) ),
            3: ( (-1, 0, 0, 0), (0, -0.371815, 0.928307, 0), (0, 0.928307, 0.371815, 0), (0, 99.8677, 40, 1) ),
            4: ( (-1, 0, 0, 0), (0, -0.37214, 0.928177, 0), (0, 0.928177, 0.37214, 0), (0, 99.7664, 40, 1) ),
            5: ( (-1, 0, 0, 0), (0, -0.372555, 0.92801, 0), (0, 0.92801, 0.372555, 0), (0, 99.6375, 40, 1) ),
            6: ( (-1, 0, 0, 0), (0, -0.373057, 0.927808, 0), (0, 0.927808, 0.373057, 0), (0, 99.4816, 40, 1) ),
            7: ( (-1, 0, 0, 0), (0, -0.373647, 0.927571, 0), (0, 0.927571, 0.373647, 0), (0, 99.2993, 40, 1) ),
            8: ( (-1, 0, 0, 0), (0, -0.374321, 0.927299, 0), (0, 0.927299, 0.374321, 0), (0, 99.0912, 40, 1) ),
            9: ( (-1, 0, 0, 0), (0, -0.375081, 0.926992, 0), (0, 0.926992, 0.375081, 0), (0, 98.8579, 40, 1) ),
            10: ( (-1, 0, 0, 0), (0, -0.375923, 0.926651, 0), (0, 0.926651, 0.375923, 0), (0, 98.6, 40, 1) ),
            11: ( (-1, 0, 0, 0), (0, -0.376848, 0.926275, 0), (0, 0.926275, 0.376848, 0), (0, 98.3181, 40, 1) ),
            12: ( (-1, 0, 0, 0), (0, -0.377855, 0.925865, 0), (0, 0.925865, 0.377855, 0), (0, 98.0128, 40, 1) ),
            13: ( (-1, 0, 0, 0), (0, -0.378942, 0.92542, 0), (0, 0.92542, 0.378942, 0), (0, 97.6847, 40, 1) ),
            14: ( (-1, 0, 0, 0), (0, -0.380109, 0.924942, 0), (0, 0.924942, 0.380109, 0), (0, 97.3344, 40, 1) ),
            15: ( (-1, 0, 0, 0), (0, -0.381355, 0.924429, 0), (0, 0.924429, 0.381355, 0), (0, 96.9625, 40, 1) ),
            16: ( (-1, 0, 0, 0), (0, -0.38268, 0.923881, 0), (0, 0.923881, 0.38268, 0), (0, 96.5696, 40, 1) ),
            17: ( (-1, 0, 0, 0), (0, -0.384082, 0.923299, 0), (0, 0.923299, 0.384082, 0), (0, 96.1563, 40, 1) ),
            18: ( (-1, 0, 0, 0), (0, -0.385562, 0.922682, 0), (0, 0.922682, 0.385562, 0), (0, 95.7232, 40, 1) ),
            19: ( (-1, 0, 0, 0), (0, -0.387119, 0.92203, 0), (0, 0.92203, 0.387119, 0), (0, 95.2709, 40, 1) ),
            20: ( (-1, 0, 0, 0), (0, -0.388752, 0.921342, 0), (0, 0.921342, 0.388752, 0), (0, 94.8, 40, 1) ),
            21: ( (-1, 0, 0, 0), (0, -0.390461, 0.92062, 0), (0, 0.92062, 0.390461, 0), (0, 94.3111, 40, 1) ),
            22: ( (-1, 0, 0, 0), (0, -0.392245, 0.919861, 0), (0, 0.919861, 0.392245, 0), (0, 93.8048, 40, 1) ),
            23: ( (-1, 0, 0, 0), (0, -0.394103, 0.919066, 0), (0, 0.919066, 0.394103, 0), (0, 93.2817, 40, 1) ),
            24: ( (-1, 0, 0, 0), (0, -0.396037, 0.918235, 0), (0, 0.918235, 0.396037, 0), (0, 92.7424, 40, 1) ),
            25: ( (-1, 0, 0, 0), (0, -0.398044, 0.917366, 0), (0, 0.917366, 0.398044, 0), (0, 92.1875, 40, 1) ),
            26: ( (-1, 0, 0, 0), (0, -0.400124, 0.916461, 0), (0, 0.916461, 0.400124, 0), (0, 91.6176, 40, 1) ),
            27: ( (-1, 0, 0, 0), (0, -0.402278, 0.915518, 0), (0, 0.915518, 0.402278, 0), (0, 91.0333, 40, 1) ),
            28: ( (-1, 0, 0, 0), (0, -0.404504, 0.914536, 0), (0, 0.914536, 0.404504, 0), (0, 90.4352, 40, 1) ),
            29: ( (-1, 0, 0, 0), (0, -0.406803, 0.913516, 0), (0, 0.913516, 0.406803, 0), (0, 89.8239, 40, 1) ),
            30: ( (-1, 0, 0, 0), (0, -0.409173, 0.912457, 0), (0, 0.912457, 0.409173, 0), (0, 89.2, 40, 1) ),
            31: ( (-1, 0, 0, 0), (0, -0.411615, 0.911358, 0), (0, 0.911358, 0.411615, 0), (0, 88.5641, 40, 1) ),
            32: ( (-1, 0, 0, 0), (0, -0.414127, 0.910219, 0), (0, 0.910219, 0.414127, 0), (0, 87.9168, 40, 1) ),
            33: ( (-1, 0, 0, 0), (0, -0.41671, 0.909039, 0), (0, 0.909039, 0.41671, 0), (0, 87.2587, 40, 1) ),
            34: ( (-1, 0, 0, 0), (0, -0.419362, 0.907819, 0), (0, 0.907819, 0.419362, 0), (0, 86.5904, 40, 1) ),
            35: ( (-1, 0, 0, 0), (0, -0.422084, 0.906557, 0), (0, 0.906557, 0.422084, 0), (0, 85.9125, 40, 1) ),
            36: ( (-1, 0, 0, 0), (0, -0.424874, 0.905253, 0), (0, 0.905253, 0.424874, 0), (0, 85.2256, 40, 1) ),
            37: ( (-1, 0, 0, 0), (0, -0.427731, 0.903906, 0), (0, 0.903906, 0.427731, 0), (0, 84.5303, 40, 1) ),
            38: ( (-1, 0, 0, 0), (0, -0.430656, 0.902516, 0), (0, 0.902516, 0.430656, 0), (0, 83.8272, 40, 1) ),
            39: ( (-1, 0, 0, 0), (0, -0.433646, 0.901083, 0), (0, 0.901083, 0.433646, 0), (0, 83.1169, 40, 1) ),
            40: ( (-1, 0, 0, 0), (0, -0.436702, 0.899606, 0), (0, 0.899606, 0.436702, 0), (0, 82.4, 40, 1) ),
            41: ( (-1, 0, 0, 0), (0, -0.439822, 0.898085, 0), (0, 0.898085, 0.439822, 0), (0, 81.6771, 40, 1) ),
            42: ( (-1, 0, 0, 0), (0, -0.443005, 0.896519, 0), (0, 0.896519, 0.443005, 0), (0, 80.9488, 40, 1) ),
            43: ( (-1, 0, 0, 0), (0, -0.446251, 0.894908, 0), (0, 0.894908, 0.446251, 0), (0, 80.2157, 40, 1) ),
            44: ( (-1, 0, 0, 0), (0, -0.449557, 0.893252, 0), (0, 0.893252, 0.449557, 0), (0, 79.4784, 40, 1) ),
            45: ( (-1, 0, 0, 0), (0, -0.452923, 0.89155, 0), (0, 0.89155, 0.452923, 0), (0, 78.7375, 40, 1) ),
            46: ( (-1, 0, 0, 0), (0, -0.456346, 0.889802, 0), (0, 0.889802, 0.456346, 0), (0, 77.9936, 40, 1) ),
            47: ( (-1, 0, 0, 0), (0, -0.459826, 0.888009, 0), (0, 0.888009, 0.459826, 0), (0, 77.2473, 40, 1) ),
            48: ( (-1, 0, 0, 0), (0, -0.463361, 0.886169, 0), (0, 0.886169, 0.463361, 0), (0, 76.4992, 40, 1) ),
            49: ( (-1, 0, 0, 0), (0, -0.466949, 0.884284, 0), (0, 0.884284, 0.466949, 0), (0, 75.7499, 40, 1) ),
            50: ( (-1, 0, 0, 0), (0, -0.470588, 0.882353, 0), (0, 0.882353, 0.470588, 0), (0, 75, 40, 1) ),
            51: ( (-1, 0, 0, 0), (0, -0.474276, 0.880376, 0), (0, 0.880376, 0.474276, 0), (0, 74.2501, 40, 1) ),
            52: ( (-1, 0, 0, 0), (0, -0.478011, 0.878354, 0), (0, 0.878354, 0.478011, 0), (0, 73.5008, 40, 1) ),
            53: ( (-1, 0, 0, 0), (0, -0.481789, 0.876287, 0), (0, 0.876287, 0.481789, 0), (0, 72.7527, 40, 1) ),
            54: ( (-1, 0, 0, 0), (0, -0.48561, 0.874176, 0), (0, 0.874176, 0.48561, 0), (0, 72.0064, 40, 1) ),
            55: ( (-1, 0, 0, 0), (0, -0.489469, 0.87202, 0), (0, 0.87202, 0.489469, 0), (0, 71.2625, 40, 1) ),
            56: ( (-1, 0, 0, 0), (0, -0.493365, 0.869822, 0), (0, 0.869822, 0.493365, 0), (0, 70.5216, 40, 1) ),
            57: ( (-1, 0, 0, 0), (0, -0.497294, 0.867582, 0), (0, 0.867582, 0.497294, 0), (0, 69.7843, 40, 1) ),
            58: ( (-1, 0, 0, 0), (0, -0.501252, 0.865301, 0), (0, 0.865301, 0.501252, 0), (0, 69.0512, 40, 1) ),
            59: ( (-1, 0, 0, 0), (0, -0.505237, 0.862981, 0), (0, 0.862981, 0.505237, 0), (0, 68.3229, 40, 1) ),
            60: ( (-1, 0, 0, 0), (0, -0.509244, 0.860622, 0), (0, 0.860622, 0.509244, 0), (0, 67.6, 40, 1) ),
            61: ( (-1, 0, 0, 0), (0, -0.51327, 0.858227, 0), (0, 0.858227, 0.51327, 0), (0, 66.8831, 40, 1) ),
            62: ( (-1, 0, 0, 0), (0, -0.517311, 0.855798, 0), (0, 0.855798, 0.517311, 0), (0, 66.1728, 40, 1) ),
            63: ( (-1, 0, 0, 0), (0, -0.521362, 0.853336, 0), (0, 0.853336, 0.521362, 0), (0, 65.4697, 40, 1) ),
            64: ( (-1, 0, 0, 0), (0, -0.52542, 0.850843, 0), (0, 0.850843, 0.52542, 0), (0, 64.7744, 40, 1) ),
            65: ( (-1, 0, 0, 0), (0, -0.529478, 0.848323, 0), (0, 0.848323, 0.529478, 0), (0, 64.0875, 40, 1) ),
            66: ( (-1, 0, 0, 0), (0, -0.533534, 0.845779, 0), (0, 0.845779, 0.533534, 0), (0, 63.4096, 40, 1) ),
            67: ( (-1, 0, 0, 0), (0, -0.53758, 0.843212, 0), (0, 0.843212, 0.53758, 0), (0, 62.7413, 40, 1) ),
            68: ( (-1, 0, 0, 0), (0, -0.541614, 0.840628, 0), (0, 0.840628, 0.541614, 0), (0, 62.0832, 40, 1) ),
            69: ( (-1, 0, 0, 0), (0, -0.545627, 0.838028, 0), (0, 0.838028, 0.545627, 0), (0, 61.4359, 40, 1) ),
            70: ( (-1, 0, 0, 0), (0, -0.549616, 0.835417, 0), (0, 0.835417, 0.549616, 0), (0, 60.8, 40, 1) ),
            71: ( (-1, 0, 0, 0), (0, -0.553575, 0.832799, 0), (0, 0.832799, 0.553575, 0), (0, 60.1761, 40, 1) ),
            72: ( (-1, 0, 0, 0), (0, -0.557497, 0.830179, 0), (0, 0.830179, 0.557497, 0), (0, 59.5648, 40, 1) ),
            73: ( (-1, 0, 0, 0), (0, -0.561375, 0.827561, 0), (0, 0.827561, 0.561375, 0), (0, 58.9667, 40, 1) ),
            74: ( (-1, 0, 0, 0), (0, -0.565205, 0.824951, 0), (0, 0.824951, 0.565205, 0), (0, 58.3824, 40, 1) ),
            75: ( (-1, 0, 0, 0), (0, -0.568979, 0.822352, 0), (0, 0.822352, 0.568979, 0), (0, 57.8125, 40, 1) ),
            76: ( (-1, 0, 0, 0), (0, -0.57269, 0.819772, 0), (0, 0.819772, 0.57269, 0), (0, 57.2576, 40, 1) ),
            77: ( (-1, 0, 0, 0), (0, -0.576333, 0.817215, 0), (0, 0.817215, 0.576333, 0), (0, 56.7183, 40, 1) ),
            78: ( (-1, 0, 0, 0), (0, -0.579899, 0.814688, 0), (0, 0.814688, 0.579899, 0), (0, 56.1952, 40, 1) ),
            79: ( (-1, 0, 0, 0), (0, -0.583382, 0.812198, 0), (0, 0.812198, 0.583382, 0), (0, 55.6889, 40, 1) ),
            80: ( (-1, 0, 0, 0), (0, -0.586775, 0.80975, 0), (0, 0.80975, 0.586775, 0), (0, 55.2, 40, 1) ),
            81: ( (-1, 0, 0, 0), (0, -0.590071, 0.807351, 0), (0, 0.807351, 0.590071, 0), (0, 54.7291, 40, 1) ),
            82: ( (-1, 0, 0, 0), (0, -0.593262, 0.805009, 0), (0, 0.805009, 0.593262, 0), (0, 54.2768, 40, 1) ),
            83: ( (-1, 0, 0, 0), (0, -0.596341, 0.802731, 0), (0, 0.802731, 0.596341, 0), (0, 53.8437, 40, 1) ),
            84: ( (-1, 0, 0, 0), (0, -0.599302, 0.800523, 0), (0, 0.800523, 0.599302, 0), (0, 53.4304, 40, 1) ),
            85: ( (-1, 0, 0, 0), (0, -0.602135, 0.798394, 0), (0, 0.798394, 0.602135, 0), (0, 53.0375, 40, 1) ),
            86: ( (-1, 0, 0, 0), (0, -0.604835, 0.79635, 0), (0, 0.79635, 0.604835, 0), (0, 52.6656, 40, 1) ),
            87: ( (-1, 0, 0, 0), (0, -0.607394, 0.7944, 0), (0, 0.7944, 0.607394, 0), (0, 52.3153, 40, 1) ),
            88: ( (-1, 0, 0, 0), (0, -0.609805, 0.792551, 0), (0, 0.792551, 0.609805, 0), (0, 51.9872, 40, 1) ),
            89: ( (-1, 0, 0, 0), (0, -0.61206, 0.790811, 0), (0, 0.790811, 0.61206, 0), (0, 51.6819, 40, 1) ),
            90: ( (-1, 0, 0, 0), (0, -0.614153, 0.789187, 0), (0, 0.789187, 0.614153, 0), (0, 51.4, 40, 1) ),
            91: ( (-1, 0, 0, 0), (0, -0.616077, 0.787686, 0), (0, 0.787686, 0.616077, 0), (0, 51.1421, 40, 1) ),
            92: ( (-1, 0, 0, 0), (0, -0.617824, 0.786317, 0), (0, 0.786317, 0.617824, 0), (0, 50.9088, 40, 1) ),
            93: ( (-1, 0, 0, 0), (0, -0.619388, 0.785085, 0), (0, 0.785085, 0.619388, 0), (0, 50.7007, 40, 1) ),
            94: ( (-1, 0, 0, 0), (0, -0.620763, 0.783998, 0), (0, 0.783998, 0.620763, 0), (0, 50.5184, 40, 1) ),
            95: ( (-1, 0, 0, 0), (0, -0.621942, 0.783064, 0), (0, 0.783064, 0.621942, 0), (0, 50.3625, 40, 1) ),
            96: ( (-1, 0, 0, 0), (0, -0.622919, 0.782286, 0), (0, 0.782286, 0.622919, 0), (0, 50.2336, 40, 1) ),
            97: ( (-1, 0, 0, 0), (0, -0.623688, 0.781673, 0), (0, 0.781673, 0.623688, 0), (0, 50.1323, 40, 1) ),
            98: ( (-1, 0, 0, 0), (0, -0.624244, 0.781229, 0), (0, 0.781229, 0.624244, 0), (0, 50.0592, 40, 1) ),
            99: ( (-1, 0, 0, 0), (0, -0.624582, 0.78096, 0), (0, 0.78096, 0.624582, 0), (0, 50.0149, 40, 1) ),
            100: ( (-1, 0, 0, 0), (0, -0.624695, 0.780869, 0), (0, 0.780869, 0.624695, 0), (0, 50, 40, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "Cam2"
    {
        float exposure.timeSamples = {
            0: 6,
        }
        float focalLength.timeSamples = {
            0: 40.586136,
        }
        float focusDistance.timeSamples = {
            0: 109.044586,
        }
        float fStop.timeSamples = {
            0: 8,
        }
        float horizontalAperture.timeSamples = {
            0: 36.000004,
        }
        token projection = "perspective"
        double shutter:close.timeSamples = {
            0: 449.99997653067237,
        }
        float verticalAperture.timeSamples = {
            0: 20.250002,
        }
        matrix4d xformOp:transform.timeSamples = {
            0: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            1: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            2: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            3: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            4: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            5: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            6: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            7: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            8: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            9: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            10: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            11: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            12: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            13: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            14: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            15: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            16: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            17: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            18: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            19: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            20: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            21: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            22: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            23: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            24: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            25: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            26: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            27: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            28: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            29: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            30: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            31: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            32: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            33: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            34: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            35: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            36: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            37: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            38: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            39: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            40: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            41: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            42: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            43: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            44: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            45: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            46: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            47: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            48: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            49: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            50: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            51: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            52: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            53: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            54: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            55: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            56: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            57: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            58: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            59: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            60: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            61: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            62: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            63: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            64: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            65: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            66: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            67: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            68: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            69: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            70: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            71: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            72: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            73: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            74: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            75: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            76: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            77: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            78: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            79: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            80: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            81: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            82: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            83: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            84: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            85: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            86: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            87: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            88: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            89: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            90: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            91: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            92: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            93: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            94: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            95: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            96: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            97: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            98: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            99: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
            100: ( (0.304418, -0.952539, 0, 0), (0, 0, 1, 0), (-0.952539, -0.304418, 0, 0), (-106.871, -34.014, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

